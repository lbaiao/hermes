function generalCheckParameters( settings )
%GENERALCHECKPARAMETERS This function checks general parameters
%  This function is responsible for checking general parameters.
%  Range of defined parameters, as well as the validity of a combination of
%  parameters should be tested in this script. If the parameters are not
%  compliant, error messages will stop the execution of HERMES Link
%  Simulator.
%
%   Syntax: generalCheckParameters
%
%   Author: Andre Noll Barreto
%   Work Address: INDT Brasilia
%   E-mail: andre.noll@indt.org
%   History:
%      v2.0 28 Apr 2015 - created
%
%   Copyright (c) 2015 INDT - Institute of Technology Development.
%
%   The program may be used and/or copied only with the written
%   permission of INDT, or in accordance with the terms and conditions
%   stipulated in the agreement/contract under which the program has been
%   supplied.


%%
% define desired structure and whether fields are mandatory
parameters = parameterCheck.ParameterDef();

parameters.addParameter( 'DROPS', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY );
                     
parameters.addParameter( 'DROPS.DURATION', 'double', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         '%this > 0' );
                     
parameters.addParameter( 'DROPS.STOPPING_CRITERIA', ...
                         'enum.drops.StoppingCriteria', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         enum.parameterCheck.Property.IS_VECTOR );
                     
parameters.addParameter( 'DROPS.MAX_NUMBER_OF_DROPS', 'uint32', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         '%this >= %DROPS.MAX_NUMBER_OF_DROPS' );
                     
parameters.addParameter( 'DROPS.MIN_NUMBER_OF_DROPS', 'uint32', ...
                         'default', 1, '%this > 0' );
                     
parameters.addParameter( 'DROPS.CONFIDENCE_LEVEL', 'double', ...
                         'default', 0.95, '%this > 0', '%this < 1' );
                     
parameters.addParameter( 'DROPS.ERROR_MARGIN', 'double', ...
                         'default', 0.1, '%this > 0' );
                     
parameters.addParameter( 'SNR', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY )
                     
parameters.addParameter( 'SNR.TYPE', 'enum.snr.Type', ...
                         'default', enum.snr.Type.EBNO );
                     
parameters.addParameter( 'SNR.VECTOR_dB', 'double', ...
                          enum.parameterCheck.Property.IS_VECTOR, ...
                          enum.parameterCheck.Property.IS_MANDATORY );
                      
parameters.addParameter( 'SCENARIO', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY );
                     
parameters.addParameter( 'SCENARIO.NODE', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         enum.parameterCheck.Property.IS_CELL_ARRAY );
                     
parameters.addParameter( 'SCENARIO.NODE.POSITION', 'double', ...
                         enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', 'isequal( size( %this ) [ 1 3 ] )' );            
                     
parameters.addParameter( 'SCENARIO.NODE.VELOCITY', 'double', ...
                         enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', 0, ...
                         'isequal( size( %this ), [ 1 3 ] ) || isequal( size( %this ), [ 1 1 ] )');                              
                     
parameters.addParameter( 'SCENARIO.MODEM', 'struct', ...
                         enum.parameterCheck.Property.IS_CELL_ARRAY, ...
                         enum.parameterCheck.Property.IS_MANDATORY );
                     
parameters.addParameter( 'SCENARIO.MODEM.NODE', 'uint32', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         '%this > 0 && %this <= length( %SCENARIO.NODE )'); 
                     
parameters.addParameter( 'SCENARIO.MODEM.TECHNOLOGY', 'enum.Technology', ...
                         enum.parameterCheck.Property.IS_MANDATORY );                         
                     
parameters.addParameter( 'SCENARIO.MODEM.LTE', 'struct', ...
                         enum.parameterCheck.Property.IGNORE_SUBFIELDS );

parameters.addParameter( 'SCENARIO.MODEM.FIVEG', 'struct', ...
                         enum.parameterCheck.Property.IGNORE_SUBFIELDS );
                     
parameters.addParameter( 'SCENARIO.MODEM.WIFI', 'struct', ...
                         enum.parameterCheck.Property.IGNORE_SUBFIELDS );
                     
parameters.addParameter( 'SCENARIO.MODEM.NUMBER_OF_ANTENNAS', 'uint32', ...
                         'default', 1, '%this > 0' );
                     
parameters.addParameter( 'SCENARIO.MODEM.ANTENNA_POSITION', 'double', ...
                         enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', [ 0 0 0], ...
                         'isequal( size( %this ), [1 3] )' );

parameters.addParameter( 'SCENARIO.MODEM.ANTENNA_TYPE', ...
                         'enum.antenna.AntennaType', ...
                         'default', enum.antenna.AntennaType.ISOTROPIC );
                     
parameters.addParameter( 'SCENARIO.MAIN', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY );                     
                     
parameters.addParameter( 'SCENARIO.MAIN.TX_MODEMS', 'uint32', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...
                         '%this > 0', '%this <= length( %SCENARIO.MODEM )' );
                    
parameters.addParameter( 'SCENARIO.MAIN.RX_MODEMS', 'uint32', ...
                         enum.parameterCheck.Property.IS_MANDATORY, ...                     
                         '%this > 0', '%this <= length( %SCENARIO.MODEM )' );
                         
parameters.addParameter( 'SCENARIO.MODEM.CARRIER_FREQUENCY', 'double', ...
                         '%this > 0');                     

parameters.addParameter( 'SCENARIO.MODEM.CHANNEL_ESTIMATION', ...
                         'enum.modem.ChannelEstimation', ...
                         'default', enum.modem.ChannelEstimation.PERFECT ); 
                     
parameters.addParameter( 'SCENARIO.MODEM.EQUALIZATION', ...
                         'enum.modem.Equalization', ...
                         'default', enum.modem.Equalization.ZF );     
                     
parameters.addParameter( 'SCENARIO.MODEM.LLR_METHOD', ...
                         'enum.modem.LlrMethod', ...
                         'default', enum.modem.LlrMethod.IDEAL_AWGN );                                              

parameters.addParameter( 'CHANNEL', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY );
                                          
parameters.addParameter( 'CHANNEL.MULTIPATH', 'struct', ...
                         enum.parameterCheck.Property.IS_MANDATORY );                     
                     
parameters.addParameter( 'CHANNEL.MULTIPATH.MODEL', ...
                         'enum.channel.MultipathModel', ...
                         enum.parameterCheck.Property.IS_MANDATORY );

parameters.addParameter( 'CHANNEL.MULTIPATH.GENERIC', 'struct' );
                     
parameters.addParameter( 'CHANNEL.MULTIPATH.GENERIC.DELAYS_S', 'double', ...
                         enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', 0 );
                     
parameters.addParameter( 'CHANNEL.MULTIPATH.GENERIC.POWER_DELAY_PROFILE_DB', ...
                         'double', enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', 0, ...
                         'isequal( size(%this), size(%CHANNEL.MULTIPATH.GENERIC.DELAYS_S))' );                     

parameters.addParameter( 'CHANNEL.MULTIPATH.GENERIC.K_RICE_DB', ...
                         'double', enum.parameterCheck.Property.IS_VECTOR, ...
                         'default', -inf, ...
                         'isequal( size(%this), size(%CHANNEL.MULTIPATH.GENERIC.DELAYS_S))' );    

parameters.addParameter( 'CHANNEL.MULTIPATH.GENERIC.DOPPLER', 'double', ...
                         'default', 0 );

parameters.addParameter( 'CHANNEL.MULTIPATH.COST259', 'struct' );                     
                     
parameters.addParameter( 'CHANNEL.MULTIPATH.COST259.TYPE', ...
                         'enum.channel.Cost259' );
                     
parameters.addParameter( 'CHANNEL.MULTIPATH.COST259.DOPPLER', 'double' );                     

parameters.addParameter( 'CHANNEL.NOISE_MODEL', ...
                         'enum.channel.Noise', ...
                         'default', enum.channel.Noise.AWGN );  

parameters.addParameter( 'SHOW_PROGRESS', 'logical' , 'default', false ) 

parameters.addParameter( 'DISPLAY_INTERVAL', 'double', 'default', 0.001, ...
                         '%this > 0' )

parameters.addParameter( 'currentParamFile', 'char', ...
                         enum.parameterCheck.Property.IS_VECTOR );     
                     

%% verify syntax                     
% verify if any invalid field is listed in parameters
assert( ~parameters.anyInvalidField( settings ) );

% verify if all mandatory fields are defined and assign default values
settings = parameters.checkMandatoryFields( settings );
assert( ~isempty( settings ) );

end


