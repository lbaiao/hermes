classdef LteMapper < modem.Mapper
%LTEMAPPER defines a modulator for LTE technology.
%   This class inherits the main properties from "MAPPER" class and
%   defines specific modulation mapper based on 3GPP TS 36.211,
%   V12.3.0 (2014-09), Section 7.1. This class uses modulations: BPSK,
%   QPSK, 16QAM, 64QAM and 256QAM.
%
%   Methods:
%   Constructor
%       Syntax: this = modem.LteMapper( modulationOrder )
%           Creates an instance of mapper class with the alphabets defined
%           in LTE standards.
%
%   calculateLlr
%       Syntax 1: [ receivedLlr ] = calculateLlr( receivedSymbols, 
%                                                 noiseVariance )
%           It's an optimized implementation of calculateLlr method from
%           Mapper class based on:
%           - Ki S. Kim, Kwangmin Hyun, Chang, Chang W. Yu, Youn O. Park,
%           Dongweon Yoon, Sang, K. Park. "General Log-Likelihood Ratio
%           Expression and Its Implementation Algorithm for Gray-Coded QAM
%           Signals. ETRI Journal, Vol. 28, N.3, June 2006.
%
%       Syntax 2: [ receivedLlr ] = calculateLlr( receivedSymbols )
%
%       Inputs:
%           receivedSymbols <K complex x 1 double> : symbols to be demapped.
%           noiseVariance < K complex x 1 > : noise variance of
%                         received symbols. If left empty, then
%                         noiseVariance = 1 for all symbols.
%       Outputs:
%           receivedLlr < N x 1 double > : received soft bits,
%                         N = K * log2(modulationOrder). If bit is
%                         1, then LLR>0.
%
%   Author: Lilian Freitas (LCF), Andre Noll Barreto (ANB)
%   Work Address: INDT Manaus/Brasilia
%   E-mail: <lilian.freitas>@indt.org.br, andre.noll@indt.org
%   History:
%       v1.0 10 Apr 2015 (LCF, ANB) - created
%
%   Copyright (c) 2015 INDT - Institute of Technology Development.
%
%   The program may be used and/or copied only with the written
%   permission of INDT, or in accordance with the terms and conditions
%   stipulated in the agreement/contract under which the program has been
%   supplied.


    methods

        % constructor
        function this = LteMapper( modulationOrder )

            % Define symbol alphabet for BPSK, QPSK, 16QAM, 64QAM and 256QAM,
            %  according to standard 3GPP TS 36.211, V12.3.0 (2014-09)

            % BPSK symbol alphabet
            symbolAlphabet{1}   = [ 1+1j; -1-1j ]/sqrt(2);

            % QPSK symbol alphabet
            symbolAlphabet{2}   = [ 1+1j; 1-1j; -1+1j; -1-1j]/sqrt(2);

            % 16QAM symbol alphabet
            symbolAlphabet{4}   = [
                complex( 1,  1 ); ...
                complex( 1,  3 ); ...
                complex( 3,  1 ); ...
                complex( 3,  3 ); ...
                complex( 1, -1 ); ...
                complex( 1, -3 ); ...
                complex( 3, -1 ); ...
                complex( 3, -3 ); ...
                complex(-1,  1 ); ...
                complex(-1,  3 ); ...
                complex(-3,  1 ); ...
                complex(-3,  3 ); ...
                complex(-1, -1 ); ...
                complex(-1, -3 ); ...
                complex(-3, -1 ); ...
                complex(-3, -3 )] / sqrt(10);

            % 64QAM symbol alphabet, defined in Table 7.1.4-1
            symbolAlphabet{6}  =  [
                complex( 3,  3 ); ...
                complex( 3,  1 ); ...
                complex( 1,  3 ); ...
                complex( 1,  1 ); ...
                complex( 3,  5 ); ...
                complex( 3,  7 ); ...
                complex( 1,  5 ); ...
                complex( 1,  7 ); ...
                complex( 5,  3 ); ...
                complex( 5,  1 ); ...
                complex( 7,  3 ); ...
                complex( 7,  1 ); ...
                complex( 5,  5 ); ...
                complex( 5,  7 ); ...
                complex( 7,  5 ); ...
                complex( 7,  7 ); ...
                complex( 3, -3 ); ...
                complex( 3, -1 ); ...
                complex( 1, -3 ); ...
                complex( 1, -1 ); ...
                complex( 3, -5 ); ...
                complex( 3, -7 ); ...
                complex( 1, -5 ); ...
                complex( 1, -7 ); ...
                complex( 5, -3 ); ...
                complex( 5, -1 ); ...
                complex( 7, -3 ); ...
                complex( 7, -1 ); ...
                complex( 5, -5 ); ...
                complex( 5, -7 ); ...
                complex( 7, -5 ); ...
                complex( 7, -7 ); ...
                complex( -3,  3 ); ...
                complex( -3,  1 ); ...
                complex( -1,  3 ); ...
                complex( -1,  1 ); ...
                complex( -3,  5 ); ...
                complex( -3,  7 ); ...
                complex( -1,  5 ); ...
                complex( -1,  7 ); ...
                complex( -5,  3 ); ...
                complex( -5,  1 ); ...
                complex( -7,  3 ); ...
                complex( -7,  1 ); ...
                complex( -5,  5 ); ...
                complex( -5,  7 ); ...
                complex( -7,  5 ); ...
                complex( -7,  7 ); ...
                complex( -3, -3 ); ...
                complex( -3, -1 ); ...
                complex( -1, -3 ); ...
                complex( -1, -1 ); ...
                complex( -3, -5 ); ...
                complex( -3, -7 ); ...
                complex( -1, -5 ); ...
                complex( -1, -7 ); ...
                complex( -5, -3 ); ...
                complex( -5, -1 ); ...
                complex( -7, -3 ); ...
                complex( -7, -1 ); ...
                complex( -5, -5 ); ...
                complex( -5, -7 ); ...
                complex( -7, -5 ); ...
                complex( -7, -7 ) ] / sqrt(42);

            % 256QAM symbol alphabet, defined in Table 7.1.5-1 (3GPP 36.211)
            symbolAlphabet{8} = [
                complex( 5,    5   ); ...
                complex( 5,    7   ); ...
                complex( 7,    5   ); ...
                complex( 7,    7   ); ...
                complex( 5,    3   ); ...
                complex( 5,    1   ); ...
                complex( 7,    3   ); ...
                complex( 7,    1   ); ...
                complex( 3,    5   ); ...
                complex( 3,    7   ); ...
                complex( 1,    5   ); ...
                complex( 1,    7   ); ...
                complex( 3,    3   ); ...
                complex( 3,    1   ); ...
                complex( 1,    3   ); ...
                complex( 1,    1   ); ...
                complex( 5,    11  ); ...
                complex( 5,    9   ); ...
                complex( 7,    11  ); ...
                complex( 7,    9   ); ...
                complex( 5,    13  ); ...
                complex( 5,    15  ); ...
                complex( 7,    13  ); ...
                complex( 7,    15  ); ...
                complex( 3,    11  ); ...
                complex( 3,    9   ); ...
                complex( 1,    11  ); ...
                complex( 1,    9   ); ...
                complex( 3,    13  ); ...
                complex( 3,    15  ); ...
                complex( 1,    13  ); ...
                complex( 1,    15  ); ...
                complex( 11,   5   ); ...
                complex( 11,   7   ); ...
                complex( 9,    5   ); ...
                complex( 9,    7   ); ...
                complex( 11,   3   ); ...
                complex( 11,   1   ); ...
                complex( 9,    3   ); ...
                complex( 9,    1   ); ...
                complex( 13,   5   ); ...
                complex( 13,   7   ); ...
                complex( 15,   5   ); ...
                complex( 15,   7   ); ...
                complex( 13,   3   ); ...
                complex( 13,   1   ); ...
                complex( 15,   3   ); ...
                complex( 15,   1   ); ...
                complex( 11,   11  ); ...
                complex( 11,   9   ); ...
                complex( 9,	   11  ); ...
                complex( 9,	   9   ); ...
                complex( 11,   13  ); ...
                complex( 11,   15  ); ...
                complex( 9,	   13  ); ...
                complex( 9,	   15  ); ...
                complex( 13,   11  ); ...
                complex( 13,   9   ); ...
                complex( 15,   11  ); ...
                complex( 15,   9   ); ...
                complex( 13,   13  ); ...
                complex( 13,   15  ); ...
                complex( 15,   13  ); ...
                complex( 15,   15  ); ...
                complex( 5,	   -5  ); ...
                complex( 5,	   -7  ); ...
                complex( 7,	   -5  ); ...
                complex( 7,	   -7  ); ...
                complex( 5,	   -3  ); ...
                complex( 5,	   -1  ); ...
                complex( 7,    -3  ); ...
                complex( 7,	   -1  ); ...
                complex( 3,    -5  ); ...
                complex( 3,    -7  ); ...
                complex( 1,    -5  ); ...
                complex( 1,    -7  ); ...
                complex( 3,    -3  ); ...
                complex( 3,    -1  ); ...
                complex( 1,    -3  ); ...
                complex( 1,    -1  ); ...
                complex( 5,    -11 ); ...
                complex( 5,    -9  ); ...
                complex( 7,    -11 ); ...
                complex( 7,    -9  ); ...
                complex( 5,    -13 ); ...
                complex( 5,    -15 ); ...
                complex( 7,    -13 ); ...
                complex( 7,    -15 ); ...
                complex( 3,    -11 ); ...
                complex( 3,    -9  ); ...
                complex( 1,    -11 ); ...
                complex( 1,    -9  ); ...
                complex( 3,    -13 ); ...
                complex( 3,    -15 ); ...
                complex( 1,    -13 ); ...
                complex( 1,    -15 ); ...
                complex( 11,   -5  ); ...
                complex( 11,   -7  ); ...
                complex( 9,    -5  ); ...
                complex( 9,    -7  ); ...
                complex( 11,   -3  ); ...
                complex( 11,   -1  ); ...
                complex( 9,    -3  ); ...
                complex( 9,    -1  ); ...
                complex( 13,   -5  ); ...
                complex( 13,   -7  ); ...
                complex( 15,   -5  ); ...
                complex( 15,   -7  ); ...
                complex( 13,   -3  ); ...
                complex( 13,   -1  ); ...
                complex( 15,   -3  ); ...
                complex( 15,   -1  ); ...
                complex( 11,   -11 ); ...
                complex( 11,   -9  ); ...
                complex( 9,    -11 ); ...
                complex( 9,    -9  ); ...
                complex( 11,   -13 ); ...
                complex( 11,   -15 ); ...
                complex( 9,    -13 ); ...
                complex( 9,    -15 ); ...
                complex( 13,   -11 ); ...
                complex( 13,   -9  ); ...
                complex( 15,   -11 ); ...
                complex( 15,   -9  ); ...
                complex( 13,   -13 ); ...
                complex( 13,   -15 ); ...
                complex( 15,   -13 ); ...
                complex( 15,   -15 ); ...
                complex( -5,   5   ); ...
                complex( -5,   7   ); ...
                complex( -7,   5   ); ...
                complex( -7,   7   ); ...
                complex( -5,   3   ); ...
                complex( -5,   1   ); ...
                complex( -7,   3   ); ...
                complex( -7,   1   ); ...
                complex( -3,   5   ); ...
                complex( -3,   7   ); ...
                complex( -1,   5   ); ...
                complex( -1,   7   ); ...
                complex( -3,   3   ); ...
                complex( -3,   1   ); ...
                complex( -1,   3   ); ...
                complex( -1,   1   ); ...
                complex( -5,   11  ); ...
                complex( -5,   9   ); ...
                complex( -7,   11  ); ...
                complex( -7,   9   ); ...
                complex( -5,   13  ); ...
                complex( -5,   15  ); ...
                complex( -7,   13  ); ...
                complex( -7,   15  ); ...
                complex( -3,   11  ); ...
                complex( -3,   9   ); ...
                complex( -1,   11  ); ...
                complex( -1,   9   ); ...
                complex( -3,   13  ); ...
                complex( -3,   15  ); ...
                complex( -1,   13  ); ...
                complex( -1,   15  ); ...
                complex( -11,  5   ); ...
                complex( -11,  7   ); ...
                complex( -9,   5   ); ...
                complex( -9,   7   ); ...
                complex( -11,  3   ); ...
                complex( -11,  1   ); ...
                complex( -9,   3   ); ...
                complex(  -9,  1   ); ...
                complex( -13,  5   ); ...
                complex( -13,  7   ); ...
                complex( -15,  5   ); ...
                complex( -15,  7   ); ...
                complex( -13,  3   ); ...
                complex( -13,  1   ); ...
                complex( -15,  3   ); ...
                complex( -15,  1   ); ...
                complex( -11,  11  ); ...
                complex( -11,  9   ); ...
                complex( -9,   11  ); ...
                complex( -9,   9   ); ...
                complex( -11,  13  ); ...
                complex( -11,  15  ); ...
                complex( -9,   13  ); ...
                complex( -9,   15  ); ...
                complex( -13,  11  ); ...
                complex( -13,  9   ); ...
                complex( -15,  11  ); ...
                complex( -15,  9   ); ...
                complex( -13,  13  ); ...
                complex( -13,  15  ); ...
                complex( -15,  13  ); ...
                complex( -15,  15  ); ...
                complex( -5,   -5  ); ...
                complex( -5,   -7  ); ...
                complex( -7,   -5  ); ...
                complex( -7,   -7  ); ...
                complex( -5,   -3  ); ...
                complex( -5,   -1  ); ...
                complex( -7,   -3  ); ...
                complex( -7,   -1  ); ...
                complex( -3,   -5  ); ...
                complex( -3,   -7  ); ...
                complex( -1,   -5  ); ...
                complex( -1,   -7  ); ...
                complex( -3,   -3  ); ...
                complex( -3,   -1  ); ...
                complex( -1,   -3  ); ...
                complex( -1,   -1  ); ...
                complex( -5,   -11 ); ...
                complex( -5,   -9  ); ...
                complex( -7,   -11 ); ...
                complex( -7,   -9  ); ...
                complex( -5,   -13 ); ...
                complex( -5,   -15 ); ...
                complex( -7,   -13 ); ...
                complex( -7,   -15 ); ...
                complex( -3,   -11 ); ...
                complex( -3,   -9  ); ...
                complex( -1,   -11 ); ...
                complex( -1,   -9  ); ...
                complex( -3,   -13 ); ...
                complex( -3,   -15 ); ...
                complex( -1,   -13 ); ...
                complex( -1,   -15 ); ...
                complex( -11,  -5  ); ...
                complex( -11,  -7  ); ...
                complex( -9,   -5  ); ...
                complex( -9,   -7  ); ...
                complex( -11,  -3  ); ...
                complex( -11,  -1  ); ...
                complex( -9,   -3  ); ...
                complex( -9,   -1  ); ...
                complex( -13,  -5  ); ...
                complex( -13,  -7  ); ...
                complex( -15,  -5  ); ...
                complex( -15,  -7  ); ...
                complex( -13,  -3  ); ...
                complex( -13,  -1  ); ...
                complex( -15,  -3  ); ...
                complex( -15,  -1  ); ...
                complex( -11,  -11 ); ...
                complex( -11,  -9  ); ...
                complex( -9,   -11 ); ...
                complex( -9,   -9  ); ...
                complex( -11,  -13 ); ...
                complex( -11,  -15 ); ...
                complex( -9,   -13 ); ...
                complex( -9,   -15 ); ...
                complex( -13,  -11 ); ...
                complex( -13,  -9  ); ...
                complex( -15,  -11 ); ...
                complex( -15,  -9  ); ...
                complex( -13,  -13 ); ...
                complex( -13,  -15 ); ...
                complex( -15,  -13 ); ...
                complex( -15,  -15 ) ] / sqrt(170);

            this@modem.Mapper( symbolAlphabet, modulationOrder )

        end

    end

end

